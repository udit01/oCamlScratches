(* Note:
 * Please make suitable changes to the shared test cases so that
 * the constructors match your signature definition.
 *)

(*--==Compile & Execute==--*)

Plus(Num(1),Num(2));
Mult(Num(6),Num(6));
^(Num(2),Num(4));
Div(Num(6),Num(3));
Var("iden1");
Var("iden2");

Abs(Num(-1));
Proj(Tup([Num(12),Num(121),Num(33)]),2);

Sub(Proj(Tup[Num(2),Num(5),Num(8)],2),Num(1));
Mod(Proj(Tup[Num(2),Num(5),Num(8)],2),Num(2));

Or(
	Eql(Num(5),Num(5)),
	And(Eql(Sub(Num(2),Num(1)),Num(1)),
		Mod(Proj(Tup[Num(2),Num(5),Num(8)],2),Num(2))
	)
);

And(Bool(T), Bool(F));
Implies(NOT(Implies(Or(Bool(T), Bool(F)), And(Bool(T), Bool(F)))),Implies(And(Bool(T), Bool(F)), Or(Bool(T), Bool(F))));

Gtreq(Num(4),Num(2));
Lsreq(Num(4),Num(2));
Ifthenelse(Gtr(Num(4),Num(2)),Plus(Num(1),Num(3)),Sub(Num(1),Num(3)));

(* Lambda is a lambda function of type exp*exp and LetinEnd is a ternary operator of type exp*exp*exp *)
Apply(Lambda(Var("x"),LetinEnd(Para[Assgn(Var("a"),Num(2))],Plus(Var("a"),Var("x")))),Num(2))