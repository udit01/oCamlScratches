type token =
  | VAR of (string)
  | CONST of (string)
  | IF
  | COMMA
  | TRUE
  | FAIL
  | CUT
  | PERIOD
  | LPAREN
  | RPAREN
  | GOAL
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Syntax
# 20 "parser.ml"
let yytransl_const = [|
  259 (* IF *);
  260 (* COMMA *);
  261 (* TRUE *);
  262 (* FAIL *);
  263 (* CUT *);
  264 (* PERIOD *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* GOAL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* CONST *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\004\000\004\000\006\000\
\006\000\006\000\006\000\005\000\005\000\005\000\007\000\007\000\
\008\000\008\000\008\000\000\000\000\000"

let yylen = "\002\000\
\001\000\002\000\001\000\001\000\003\000\002\000\004\000\001\000\
\001\000\001\000\004\000\001\000\001\000\003\000\001\000\003\000\
\001\000\001\000\004\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\008\000\009\000\000\000\001\000\
\020\000\000\000\003\000\004\000\000\000\021\000\000\000\012\000\
\000\000\000\000\002\000\000\000\006\000\018\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\011\000\000\000\014\000\
\007\000\000\000\016\000\019\000"

let yydgoto = "\003\000\
\009\000\010\000\011\000\012\000\017\000\013\000\024\000\025\000"

let yysindex = "\023\000\
\001\000\000\255\000\000\013\255\000\000\000\000\010\255\000\000\
\000\000\001\000\000\000\000\000\015\255\000\000\025\255\000\000\
\020\255\026\255\000\000\010\255\000\000\000\000\022\255\019\255\
\028\255\000\000\010\255\027\255\025\255\000\000\025\255\000\000\
\000\000\023\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\001\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\255\000\000\000\000\000\000\000\000\004\255\000\000\
\024\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\026\000\036\000\000\000\000\000\239\255\249\255\246\255\000\000"

let yytablesize = 268
let yytable = "\018\000\
\008\000\004\000\028\000\010\000\010\000\005\000\006\000\017\000\
\010\000\032\000\007\000\004\000\018\000\017\000\016\000\005\000\
\006\000\020\000\034\000\018\000\035\000\015\000\021\000\001\000\
\002\000\022\000\023\000\026\000\030\000\027\000\029\000\031\000\
\036\000\015\000\033\000\019\000\013\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\005\000\006\000\
\000\000\000\000\000\000\007\000"

let yycheck = "\007\000\
\000\000\002\001\020\000\003\001\004\001\006\001\007\001\004\001\
\008\001\027\000\011\001\002\001\020\000\010\001\005\001\006\001\
\007\001\003\001\029\000\027\000\031\000\009\001\008\001\001\000\
\002\000\001\001\002\001\008\001\010\001\004\001\009\001\004\001\
\010\001\010\001\008\001\010\000\008\001\002\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\255\255\255\255\006\001\007\001\
\255\255\255\255\255\255\011\001"

let yynames_const = "\
  IF\000\
  COMMA\000\
  TRUE\000\
  FAIL\000\
  CUT\000\
  PERIOD\000\
  LPAREN\000\
  RPAREN\000\
  GOAL\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  CONST\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 25 "parser.mly"
                             ( [] )
# 173 "parser.ml"
               : Syntax.toplevel_cmd list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.toplevel_cmd) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.toplevel_cmd list) in
    Obj.repr(
# 26 "parser.mly"
                             ( _1 :: _2 )
# 181 "parser.ml"
               : Syntax.toplevel_cmd list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'goal) in
    Obj.repr(
# 29 "parser.mly"
              ( _1 )
# 188 "parser.ml"
               : Syntax.toplevel_cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assertion) in
    Obj.repr(
# 30 "parser.mly"
              ( _1 )
# 195 "parser.ml"
               : Syntax.toplevel_cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'clause) in
    Obj.repr(
# 33 "parser.mly"
                              ( Goal _2 )
# 202 "parser.ml"
               : 'goal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atom) in
    Obj.repr(
# 36 "parser.mly"
                              ( Assert (_1, []) )
# 209 "parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'clause) in
    Obj.repr(
# 37 "parser.mly"
                              ( Assert (_1, _3) )
# 217 "parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                              ( Fail )
# 223 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                              ( Cut )
# 229 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 42 "parser.mly"
                              ( Atom (_1, []) )
# 236 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 43 "parser.mly"
                              ( Atom (_1, _3) )
# 244 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                              ( [] )
# 250 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 47 "parser.mly"
                              ( [_1] )
# 257 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'clause) in
    Obj.repr(
# 48 "parser.mly"
                              ( _1 :: _3 )
# 265 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 51 "parser.mly"
                       ( [_1] )
# 272 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'literal) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 52 "parser.mly"
                       ( _1 :: _3 )
# 280 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                             ( Const _1 )
# 287 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                             ( Var (_1, 0) )
# 294 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 57 "parser.mly"
                             ( App (_1, _3) )
# 302 "parser.ml"
               : 'literal))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.toplevel_cmd list)
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Syntax.toplevel_cmd)
;;
